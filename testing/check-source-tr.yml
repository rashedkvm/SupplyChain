#@ load("@ytt:data", "data")
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: source-git-check
  namespace: #@ data.values.namespace
  annotations:
    kapp.k14s.io/change-group: sourcegitcheck-task
spec:
  workspaces:
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - default: ""
      description: A git branch ref to watch for new source
      name: git-branch
      type: string
    - default: ""
      description: A git tag ref to watch for new source
      name: git-tag
      type: string
    - default: ""
      description: A git commit sha to use
      name: git-commit
      type: string
    - description: The url to the git source repository. +Required
      name: git-url
      type: string
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
      type: string
      default: "ca-bundle.crt"
  results:
    - description: The url to the git source repository.
      name: url
      type: string
    - description: The sha to clone as configured by commit/branch/tag
      name: sha
      type: string
    - description: The sha to clone as configured by commit/branch/tag
      name: checksum
      type: string
    - description: Important result description, especially for error messages
      name: message
      type: string
  stepTemplate:
    computeResources: {}
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
          drop:
            - ALL
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
  steps:
    - name: get-latest-commit
      env:
      - name: PARAM_CRT_FILENAME
        value: $(params.crtFileName)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      image: us-east1-docker.pkg.dev/tanzucliappdev/tap-components/tap-packages@sha256:5a9d9e5588db709a4645ed966ad678a1a9edb44616f2fb8145493d8bce52ac02
      script: |-
        #!/usr/bin/env sh
        set -eu
        url="$(params.git-url)"
        branch="$(params.git-branch)"
        tag="$(params.git-tag)"
        commit="$(params.git-commit)"

        if [ -z "$url" ]; then
          printf "error: no git-url provided. git-url must exist\n" | tee $(results.message.path)
          exit 1
        fi

        printf '%b\n' "$url" | tee $(results.url.path)
        # 

        # Custom CA support
        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
            export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
            if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
            fi
        fi

        if [ ! -z "$branch" ]; then
          sha=$(git ls-remote --heads $url $branch | awk '{print $1}')
          if [ -z "$sha" ]; then
            printf 'error: using git-branch:%b\n' "$(params.git-branch)" | tee $(results.message.path)
            exit 1
          else
            printf '%b\n'"$sha" | tee $(results.sha.path)
            printf 'success: using git-branch: %b\n' "$(params.git-branch)" | tee $(results.message.path)
          fi
        elif [ ! -z "$tag" ]; then
          sha=$(git ls-remote --tags $(params.git-url) refs/tags/$(params.git-tag) | awk '{print $1}')
          if [ -z "$sha" ]; then
            printf 'error: using git-tag: %b\n' "$(params.git-tag)" | tee $(results.message.path)
            exit 1
          else
            printf '%b\n' "$sha" | tee $(results.sha.path)
            printf 'success: using git-tag: %b\n' "$(params.git-tag)" | tee $(results.message.path)
          fi
        elif [ ! -z "$commit" ]; then
          git_ls_remote_output=$(git ls-remote --refs $(params.git-url) | awk '{print $1}')
          if [ $? -ne 0 ]; then
            printf 'error: inavlid %b\n' "$(params.git-url)"  | tee $(results.message.path)
            exit 1
          fi
          if echo "$git_ls_remote_output" | grep -q "$commit"; then
            printf '%b\n' "$(params.git-commit)" | tee $(results.sha.path)
            printf 'success: using git-commit: %b\n' "$(params.git-commit)" | tee $(results.message.path)
          else
            printf 'error: commit %b not found in %b\n' "$(params.git-commit)" "$(params.git-url)"  | tee $(results.message.path)
            exit 1
          fi
        else
          printf "error: cannot look for source, you must provide one of git-branch, git-tag, git-commit or git-url.\n" | tee $(results.message.path)
          exit 1
        fi

---
apiVersion: tekton.dev/v1
kind: TaskRun
metadata:
  name: check-source-tr
  namespace: #@ data.values.namespace
  annotations:
    kapp.k14s.io/change-rule.sourcegitcheck-task: "upsert after upserting sourcegitcheck-task" 
spec:
  params:
  - name: git-branch
    value: main
  - name: git-url
    value: https://github.com/vmware-tanzu/source-controller.git
  - name: git-commit
    value: ""
  - name: git-tag
    value: ""
  serviceAccountName: #@ data.values.service_account_name
  taskRef:
    kind: Task
    params:
    - name: kind
      value: task
    - name: name
      value: source-git-check
    - name: namespace
      value: #@ data.values.namespace
    resolver: cluster
  timeout: 1h0m0s
---
apiVersion: tekton.dev/v1
kind: TaskRun
metadata:
  name: check-source-ssl
  namespace: #@ data.values.namespace
  annotations:
    kapp.k14s.io/change-rule.sourcegitcheck-task: "upsert after upserting sourcegitcheck-task" 
spec:
  params:
  - name: git-branch
    value: main
  - name: git-url
    value: https://34.162.97.4/testing/cert-test-project.git
  - name: git-commit
    value: ""
  - name: git-tag
    value: ""
  serviceAccountName: #@ data.values.service_account_name
  taskRef:
    kind: Task
    params:
    - name: kind
      value: task
    - name: name
      value: source-git-check
    - name: namespace
      value: #@ data.values.namespace
    resolver: cluster
  timeout: 1h0m0s
  workspaces:
    - name: ssl-ca-directory
      secret:
        secretName: #@ data.values.ssl_secret_name